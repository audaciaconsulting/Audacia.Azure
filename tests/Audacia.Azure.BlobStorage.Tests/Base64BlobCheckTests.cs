using System.Globalization;
using System.Text.RegularExpressions;
using Audacia.Azure.BlobStorage.Exceptions.BlobDataExceptions;
using Audacia.Azure.BlobStorage.Models;

namespace Audacia.Azure.BlobStorage.Tests;

public class Base64BlobCheckTests
{
    [Fact]
    public void Checking_valid_base_64()
    {
        // Arrange
        var blobName = "Hello";
        var validImageInBaseSixtyFour =
            "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAADMElEQVR4nOzVwQnAIBQFQYXff81RUkQCOyDj1YOPnbXWPmeTRef+/3O/OyBjzh3CD95Bfqnhf4QtqobAAAAAElFTkSuQmCC";
        
        // Act
        var bytes = BaseSixtyFourBlobChecks(blobName, validImageInBaseSixtyFour);

        // Assert
        Assert.NotEmpty(bytes);
    }
    
    [Fact]
    public void Checking_invalid_base_64()
    {
        // Arrange
        var blobName = "Hello";
        var validImageInBaseSixtyFour =
            "iVBORw0KGgoAAAANSUhEUasAAAQAAAAEACAIAAADTED8xAAADMElEQVR4nOzVwQnAIBQFQYXff81RUkQCOyDj1YOPnbXWPmeTRef+/3O/OyBjzh3CD95Bfqnhf4QtqobAAAAAElFTkSuQmCC";

        // Acts
        //var bytes = BaseSixtyFourBlobChecks(blobName, validImageInBaseSixtyFour);
        var exception = Assert.Throws<BlobDataCannotBeInvalidBaseSixtyFourException>(() => BaseSixtyFourBlobChecks(blobName, validImageInBaseSixtyFour));

        // Assert
        Assert.Equal($"Cannot add Blob: {blobName} because the data value is invalid Base 64: {validImageInBaseSixtyFour}", exception.Message);
    }
    
    /// <summary>
    /// Checks asdfsdaf.
    /// </summary>
    /// <param name="blobName">asdfasdf.</param>
    /// <param name="baseSixtyFourBlobData">asd.</param>
    /// <returns>bytes of base 64.</returns>
    /// <exception cref="BlobDataCannotBeNullException">exception 1.</exception>
    /// <exception cref="BlobDataCannotBeEmptyException">exception 2.</exception>
    /// <exception cref="BlobDataCannotBeInvalidBaseSixtyFourException">exception 3.</exception>
    private static IEnumerable<byte> BaseSixtyFourBlobChecks(string blobName, string baseSixtyFourBlobData)
    {
        if (baseSixtyFourBlobData == null)
        {
            throw new BlobDataCannotBeNullException(blobName, BlobDataType.BaseSixtyFour, CultureInfo.InvariantCulture);
        }

        if (baseSixtyFourBlobData.Length == 0)
        {
            throw new BlobDataCannotBeEmptyException(blobName, BlobDataType.BaseSixtyFour, CultureInfo.InvariantCulture);
        }

        var isValidBaseSixtyFour = (baseSixtyFourBlobData.Length % 4 == 0) && Regex.IsMatch(baseSixtyFourBlobData, @"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.None);
        if (!isValidBaseSixtyFour)
        {
            throw new BlobDataCannotBeInvalidBaseSixtyFourException(
                blobName,
                baseSixtyFourBlobData,
                CultureInfo.InvariantCulture);
        }

        return Convert.FromBase64String(baseSixtyFourBlobData);
    }
}
